!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/white/projects/flint/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ALIAS_H	src/builtins/alias.h	/^#define ALIAS_H$/;"	d
Argv	src/parser.h	/^} Argv;$/;"	t	typeref:struct:__anon4611dbbf0108
BUILTIN_H	src/builtins/builtin.h	/^#define BUILTIN_H$/;"	d
Builtin	src/builtins/builtin.c	/^} Builtin;$/;"	t	typeref:struct:__anonba70425d0108	file:
CALL_F_IF_NOT_NULL	src/libzatar.h	/^#define CALL_F_IF_NOT_NULL(/;"	d
CD_H	src/builtins/cd.h	/^#define CD_H$/;"	d
CHAR2_TO_INT	src/libzatar.h	/^#define CHAR2_TO_INT(/;"	d
CTRL_KEY	src/libzatar.h	/^#define CTRL_KEY(/;"	d
ENVIRONMENT_H	src/environment.h	/^#define ENVIRONMENT_H$/;"	d
EVAL_H	src/eval.h	/^#define EVAL_H$/;"	d
EXIT_H	src/builtins/exit.h	/^#define EXIT_H$/;"	d
EXPANTION_H	src/expantion.h	/^#define EXPANTION_H$/;"	d
EXPORT_H	src/builtins/export.h	/^#define EXPORT_H$/;"	d
Environment	src/environment.h	/^typedef struct Environment {$/;"	s
Environment	src/environment.h	/^} Environment;$/;"	t	typeref:struct:Environment
INIT_FILE_PATH	src/main.c	/^#define INIT_FILE_PATH /;"	d	file:
INTERPRETER_H	src/interpreter.h	/^#define INTERPRETER_H$/;"	d
JOB_BINARY	src/parser.h	/^    JOB_BINARY,$/;"	e	enum:__anon4611dbbf0203
JOB_COMMAND	src/parser.h	/^    JOB_COMMAND,$/;"	e	enum:__anon4611dbbf0203
JOB_UNARY	src/parser.h	/^    JOB_UNARY,$/;"	e	enum:__anon4611dbbf0203
Job	src/parser.h	/^} Job;$/;"	t	typeref:struct:__anon4611dbbf0308
Job_Binary	src/parser.h	/^} Job_Binary;$/;"	t	typeref:struct:__anon4611dbbf0608
Job_Command	src/parser.h	/^} Job_Command;$/;"	t	typeref:struct:__anon4611dbbf0408
Job_Type	src/parser.h	/^} Job_Type;$/;"	t	typeref:enum:__anon4611dbbf0203
Job_Unary	src/parser.h	/^} Job_Unary;$/;"	t	typeref:struct:__anon4611dbbf0508
Keyword	src/lexer.c	/^} Keyword;$/;"	t	typeref:struct:__anon7ad9106d0108	file:
LET_H	src/builtins/let.h	/^#define LET_H$/;"	d
LEXEL_H	src/lexer.h	/^#define LEXEL_H$/;"	d
LIBZATAR_H	src/libzatar.h	/^#define LIBZATAR_H$/;"	d
LIBZATAR_IMPLEMENTATION	build.c	/^#define LIBZATAR_IMPLEMENTATION$/;"	d	file:
LIBZATAR_IMPLEMENTATION	src/main.c	/^#define LIBZATAR_IMPLEMENTATION$/;"	d	file:
Lexer	src/lexer.h	/^} Lexer;$/;"	t	typeref:struct:__anon7ad910720108
MUT_H	src/builtins/mut.h	/^#define MUT_H$/;"	d
PARSER_H	src/parser.h	/^#define PARSER_H$/;"	d
PATH_MAX	src/main.c	/^#  define PATH_MAX /;"	d	file:
PRINT_AST_H	src/print_ast.h	/^#define PRINT_AST_H$/;"	d
STATEMENT_IF	src/parser.h	/^    STATEMENT_IF,$/;"	e	enum:__anon4611dbbf0703
STATEMENT_JOB	src/parser.h	/^    STATEMENT_JOB,$/;"	e	enum:__anon4611dbbf0703
Scanner	src/expantion.c	/^} Scanner;$/;"	t	typeref:struct:__anon2af5e8630208	file:
Statement	src/parser.h	/^} Statement;$/;"	t	typeref:struct:__anon4611dbbf0808
Statement_If	src/parser.h	/^} Statement_If;$/;"	t	typeref:struct:__anon4611dbbf0b08
Statement_Job	src/parser.h	/^} Statement_Job;$/;"	t	typeref:struct:__anon4611dbbf0a08
Statement_Type	src/parser.h	/^} Statement_Type;$/;"	t	typeref:enum:__anon4611dbbf0703
Statement_Vec	src/parser.h	/^} Statement_Vec;$/;"	t	typeref:struct:__anon4611dbbf0908
String_Vec	src/expantion.c	/^} String_Vec;$/;"	t	typeref:struct:__anon2af5e8630108	file:
TOKEN_AMPERSAND	src/token.h	/^    TOKEN_AMPERSAND,$/;"	e	enum:__anonf9133d330103
TOKEN_AND_IF	src/token.h	/^    TOKEN_AND_IF,$/;"	e	enum:__anonf9133d330103
TOKEN_DQUOTED_STRING	src/token.h	/^    TOKEN_DQUOTED_STRING,$/;"	e	enum:__anonf9133d330103
TOKEN_ELSE	src/token.h	/^    TOKEN_ELSE,$/;"	e	enum:__anonf9133d330103
TOKEN_END	src/token.h	/^    TOKEN_END,$/;"	e	enum:__anonf9133d330103
TOKEN_EOD	src/token.h	/^    TOKEN_EOD,$/;"	e	enum:__anonf9133d330103
TOKEN_ERROR	src/token.h	/^    TOKEN_ERROR,$/;"	e	enum:__anonf9133d330103
TOKEN_FOR	src/token.h	/^    TOKEN_FOR,$/;"	e	enum:__anonf9133d330103
TOKEN_FUN	src/token.h	/^    TOKEN_FUN,$/;"	e	enum:__anonf9133d330103
TOKEN_H	src/token.h	/^#define TOKEN_H$/;"	d
TOKEN_IF	src/token.h	/^    TOKEN_IF,$/;"	e	enum:__anonf9133d330103
TOKEN_IN	src/token.h	/^    TOKEN_IN,$/;"	e	enum:__anonf9133d330103
TOKEN_PIPE	src/token.h	/^    TOKEN_PIPE,$/;"	e	enum:__anonf9133d330103
TOKEN_SQUOTED_STRING	src/token.h	/^    TOKEN_SQUOTED_STRING,$/;"	e	enum:__anonf9133d330103
TOKEN_STATEMENT_END	src/token.h	/^    TOKEN_STATEMENT_END,$/;"	e	enum:__anonf9133d330103
TOKEN_WORD	src/token.h	/^    TOKEN_WORD,$/;"	e	enum:__anonf9133d330103
Token	src/token.h	/^} Token;$/;"	t	typeref:struct:__anonf9133d330208
Token_Type	src/token.h	/^} Token_Type;$/;"	t	typeref:enum:__anonf9133d330103
Token_Vec	src/token.h	/^} Token_Vec;$/;"	t	typeref:struct:__anonf9133d330308
Z_AVL_DECLARE	src/libzatar.h	/^#define Z_AVL_DECLARE(/;"	d
Z_AVL_IMPLEMENT	src/libzatar.h	/^#define Z_AVL_IMPLEMENT(/;"	d
Z_COLOR_BLUE	src/libzatar.h	/^#define Z_COLOR_BLUE /;"	d
Z_COLOR_BOLD_BLUE	src/libzatar.h	/^#define Z_COLOR_BOLD_BLUE /;"	d
Z_COLOR_BOLD_CYAN	src/libzatar.h	/^#define Z_COLOR_BOLD_CYAN /;"	d
Z_COLOR_BOLD_GRAY	src/libzatar.h	/^#define Z_COLOR_BOLD_GRAY /;"	d
Z_COLOR_BOLD_GREEN	src/libzatar.h	/^#define Z_COLOR_BOLD_GREEN /;"	d
Z_COLOR_BOLD_MAGENTA	src/libzatar.h	/^#define Z_COLOR_BOLD_MAGENTA /;"	d
Z_COLOR_BOLD_RED	src/libzatar.h	/^#define Z_COLOR_BOLD_RED /;"	d
Z_COLOR_BOLD_WHITE	src/libzatar.h	/^#define Z_COLOR_BOLD_WHITE /;"	d
Z_COLOR_BOLD_YELLOW	src/libzatar.h	/^#define Z_COLOR_BOLD_YELLOW /;"	d
Z_COLOR_CYAN	src/libzatar.h	/^#define Z_COLOR_CYAN /;"	d
Z_COLOR_GRAY	src/libzatar.h	/^#define Z_COLOR_GRAY /;"	d
Z_COLOR_GREEN	src/libzatar.h	/^#define Z_COLOR_GREEN /;"	d
Z_COLOR_MAGENTA	src/libzatar.h	/^#define Z_COLOR_MAGENTA /;"	d
Z_COLOR_RED	src/libzatar.h	/^#define Z_COLOR_RED /;"	d
Z_COLOR_RESET	src/libzatar.h	/^#define Z_COLOR_RESET /;"	d
Z_COLOR_WHITE	src/libzatar.h	/^#define Z_COLOR_WHITE /;"	d
Z_COLOR_YELLOW	src/libzatar.h	/^#define Z_COLOR_YELLOW /;"	d
Z_CSTR_TO_SV	src/libzatar.h	/^#define Z_CSTR_TO_SV(/;"	d
Z_CURSOR_STYLE	src/libzatar.h	/^} Z_CURSOR_STYLE;$/;"	t	typeref:enum:__anonf3571ceb0103
Z_CURSOR_STYLE_BEAM_BLINKING	src/libzatar.h	/^    Z_CURSOR_STYLE_BEAM_BLINKING      = 5,$/;"	e	enum:__anonf3571ceb0103
Z_CURSOR_STYLE_BEAM_STEADY	src/libzatar.h	/^    Z_CURSOR_STYLE_BEAM_STEADY        = 6,$/;"	e	enum:__anonf3571ceb0103
Z_CURSOR_STYLE_BLOCK_BLINKING	src/libzatar.h	/^    Z_CURSOR_STYLE_BLOCK_BLINKING     = 1,$/;"	e	enum:__anonf3571ceb0103
Z_CURSOR_STYLE_BLOCK_STEADY	src/libzatar.h	/^    Z_CURSOR_STYLE_BLOCK_STEADY       = 0,$/;"	e	enum:__anonf3571ceb0103
Z_CURSOR_STYLE_UNDERLINE_BLINKING	src/libzatar.h	/^    Z_CURSOR_STYLE_UNDERLINE_BLINKING = 3,$/;"	e	enum:__anonf3571ceb0103
Z_CURSOR_STYLE_UNDERLINE_STEADY	src/libzatar.h	/^    Z_CURSOR_STYLE_UNDERLINE_STEADY   = 4,$/;"	e	enum:__anonf3571ceb0103
Z_Cmd	src/libzatar.h	/^} Z_Cmd;$/;"	t	typeref:struct:__anonf3571ceb0508
Z_DEFAULT_GROWTH_RATE	src/libzatar.h	/^#define Z_DEFAULT_GROWTH_RATE /;"	d
Z_EMPTY_SV	src/libzatar.h	/^#define Z_EMPTY_SV(/;"	d
Z_KEY_ARROW_DOWN	src/libzatar.h	/^#define Z_KEY_ARROW_DOWN /;"	d
Z_KEY_ARROW_LEFT	src/libzatar.h	/^#define Z_KEY_ARROW_LEFT /;"	d
Z_KEY_ARROW_RIGHT	src/libzatar.h	/^#define Z_KEY_ARROW_RIGHT /;"	d
Z_KEY_ARROW_UP	src/libzatar.h	/^#define Z_KEY_ARROW_UP /;"	d
Z_KEY_DELETE	src/libzatar.h	/^#define Z_KEY_DELETE /;"	d
Z_KEY_EMPTY	src/libzatar.h	/^#define Z_KEY_EMPTY /;"	d
Z_KEY_END	src/libzatar.h	/^#define Z_KEY_END /;"	d
Z_KEY_HOME	src/libzatar.h	/^#define Z_KEY_HOME /;"	d
Z_KEY_PAGE_DOWN	src/libzatar.h	/^#define Z_KEY_PAGE_DOWN /;"	d
Z_KEY_PAGE_UP	src/libzatar.h	/^#define Z_KEY_PAGE_UP /;"	d
Z_MAP_DECLARE	src/libzatar.h	/^#define Z_MAP_DECLARE(/;"	d
Z_MAP_IMPLEMENT	src/environment.c	/^Z_MAP_IMPLEMENT(Var_Map, char *, char *, var_map)$/;"	f	file:
Z_MAP_IMPLEMENT	src/libzatar.h	/^#define Z_MAP_IMPLEMENT(/;"	d
Z_MAT_AT	src/libzatar.h	/^#define Z_MAT_AT(/;"	d
Z_MAT_DECLARE	src/libzatar.h	/^#define Z_MAT_DECLARE(/;"	d
Z_MAT_FREE	src/libzatar.h	/^#define Z_MAT_FREE(/;"	d
Z_MAT_INIT	src/libzatar.h	/^#define Z_MAT_INIT(/;"	d
Z_MAT_RESIZE	src/libzatar.h	/^#define Z_MAT_RESIZE(/;"	d
Z_Pipe_Mode	src/libzatar.h	/^} Z_Pipe_Mode;$/;"	t	typeref:enum:__anonf3571ceb0403
Z_Pipe_Mode_Read	src/libzatar.h	/^    Z_Pipe_Mode_Read = 0,$/;"	e	enum:__anonf3571ceb0403
Z_Pipe_Mode_Write	src/libzatar.h	/^    Z_Pipe_Mode_Write = 1,$/;"	e	enum:__anonf3571ceb0403
Z_STR_TO_SV	src/libzatar.h	/^#define Z_STR_TO_SV(/;"	d
Z_SV	src/libzatar.h	/^#define Z_SV(/;"	d
Z_String	src/libzatar.h	/^} Z_String;$/;"	t	typeref:struct:__anonf3571ceb0208
Z_String_View	src/libzatar.h	/^} Z_String_View;$/;"	t	typeref:struct:__anonf3571ceb0308
__anon2af5e8630108	src/expantion.c	/^typedef struct {$/;"	s	file:
__anon2af5e8630208	src/expantion.c	/^typedef struct {$/;"	s	file:
__anon4611dbbf0108	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0203	src/parser.h	/^typedef enum {$/;"	g
__anon4611dbbf0308	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0408	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0508	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0608	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0703	src/parser.h	/^typedef enum {$/;"	g
__anon4611dbbf0808	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0908	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0a08	src/parser.h	/^typedef struct {$/;"	s
__anon4611dbbf0b08	src/parser.h	/^typedef struct {$/;"	s
__anon7ad9106d0108	src/lexer.c	/^typedef struct {$/;"	s	file:
__anon7ad910720108	src/lexer.h	/^typedef struct {$/;"	s
__anonba70425d0108	src/builtins/builtin.c	/^typedef struct {$/;"	s	file:
__anonf3571ceb0103	src/libzatar.h	/^typedef enum {$/;"	g
__anonf3571ceb0208	src/libzatar.h	/^typedef struct {$/;"	s
__anonf3571ceb0308	src/libzatar.h	/^typedef struct {$/;"	s
__anonf3571ceb0403	src/libzatar.h	/^typedef enum {$/;"	g
__anonf3571ceb0508	src/libzatar.h	/^typedef struct {$/;"	s
__anonf9133d330103	src/token.h	/^typedef enum {$/;"	g
__anonf9133d330208	src/token.h	/^typedef struct {$/;"	s
__anonf9133d330308	src/token.h	/^typedef struct {$/;"	s
_z_cmd_append	src/libzatar.h	/^void _z_cmd_append(Z_Cmd *cmd, ...)$/;"	f	typeref:typename:void
_z_should_rebuild	src/libzatar.h	/^bool _z_should_rebuild(const char *target, ...)$/;"	f	typeref:typename:bool
add_alias	src/builtins/alias.c	/^void add_alias(Z_String_View key, Z_String_View value)$/;"	f	typeref:typename:void
advance	src/expantion.c	/^static char advance(Scanner *scanner)$/;"	f	typeref:typename:char	file:
advance	src/lexer.c	/^static char advance()$/;"	f	typeref:typename:char	file:
advance	src/parser.c	/^static Token advance()$/;"	f	typeref:typename:Token	file:
advance_command_substitution	src/lexer.c	/^void advance_command_substitution()$/;"	f	typeref:typename:void
advance_utill	src/lexer.c	/^void advance_utill(char c)$/;"	f	typeref:typename:void
alias_expension	src/lexer.c	/^void alias_expension(Token_Vec *tokens)$/;"	f	typeref:typename:void
argument	src/lexer.c	/^Token argument()$/;"	f	typeref:typename:Token
argv	src/parser.h	/^    Argv argv;$/;"	m	struct:__anon4611dbbf0408	typeref:typename:Argv
braced_variable	src/expantion.c	/^void braced_variable(Scanner *scanner, Z_String *output)$/;"	f	typeref:typename:void
builtin_alias	src/builtins/alias.c	/^int builtin_alias(int argc, char **argv)$/;"	f	typeref:typename:int
builtin_cd	src/builtins/cd.c	/^int builtin_cd(int argc, char **argv)$/;"	f	typeref:typename:int
builtin_cd_home	src/builtins/cd.c	/^int builtin_cd_home()$/;"	f	typeref:typename:int
builtin_cd_path	src/builtins/cd.c	/^int builtin_cd_path(const char *pathname)$/;"	f	typeref:typename:int
builtin_exit	src/builtins/exit.c	/^int builtin_exit(int argc, char **argv)$/;"	f	typeref:typename:int
builtin_export	src/builtins/export.c	/^int builtin_export(int argc, char **argv)$/;"	f	typeref:typename:int
builtin_let	src/builtins/let.c	/^int builtin_let(int argc, char **argv)$/;"	f	typeref:typename:int
builtin_mut	src/builtins/mut.c	/^int builtin_mut(int argc, char **argv)$/;"	f	typeref:typename:int
builtins	src/builtins/builtin.c	/^static Builtin builtins[] = {$/;"	v	typeref:typename:Builtin[]	file:
capacity	src/expantion.c	/^    int capacity;$/;"	m	struct:__anon2af5e8630108	typeref:typename:int	file:
capacity	src/libzatar.h	/^    int capacity;$/;"	m	struct:__anonf3571ceb0208	typeref:typename:int
capacity	src/libzatar.h	/^    int capacity;$/;"	m	struct:__anonf3571ceb0508	typeref:typename:int
capacity	src/parser.h	/^    int capacity;$/;"	m	struct:__anon4611dbbf0108	typeref:typename:int
capacity	src/parser.h	/^    int capacity;$/;"	m	struct:__anon4611dbbf0908	typeref:typename:int
capacity	src/token.h	/^    int capacity;$/;"	m	struct:__anonf9133d330308	typeref:typename:int
check	src/parser.c	/^static bool check(Token_Type type)$/;"	f	typeref:typename:bool	file:
check_keyword	src/parser.c	/^static bool check_keyword()$/;"	f	typeref:typename:bool	file:
check_string	src/parser.c	/^static bool check_string()$/;"	f	typeref:typename:bool	file:
child	src/parser.h	/^    Job *child;$/;"	m	struct:__anon4611dbbf0508	typeref:typename:Job *
close_pipe	src/eval.c	/^void close_pipe(int fd[2])$/;"	f	typeref:typename:void
command_substitution	src/expantion.c	/^void command_substitution(Scanner *scanner, Z_String *output)$/;"	f	typeref:typename:void
condition	src/parser.h	/^    Job *condition;$/;"	m	struct:__anon4611dbbf0b08	typeref:typename:Job *
consume	src/parser.c	/^Token consume(Token_Type type, const char *msg)$/;"	f	typeref:typename:Token
count_argc	src/builtins/builtin.c	/^int count_argc(char **argv)$/;"	f	typeref:typename:int
create_binary	src/parser.c	/^Job *create_binary(Job *left, Token operator, Job *right)$/;"	f	typeref:typename:Job *
create_command	src/parser.c	/^Job *create_command(Argv argv)$/;"	f	typeref:typename:Job *
create_error_token	src/lexer.c	/^static Token create_error_token(const char *msg)$/;"	f	typeref:typename:Token	file:
create_statement_if	src/parser.c	/^Statement *create_statement_if(Job *condition, Statement_Vec ifBranch)$/;"	f	typeref:typename:Statement *
create_statement_job	src/parser.c	/^Statement *create_statement_job(Job *job)$/;"	f	typeref:typename:Statement *
create_token	src/lexer.c	/^static Token create_token(Token_Type type)$/;"	f	typeref:typename:Token	file:
create_unary	src/parser.c	/^Job *create_unary(Token operator, Job *child)$/;"	f	typeref:typename:Job *
curr	src/expantion.c	/^    const char *curr;$/;"	m	struct:__anon2af5e8630208	typeref:typename:const char *	file:
curr	src/lexer.c	/^static const char *curr;$/;"	v	typeref:typename:const char *	file:
curr	src/lexer.h	/^    const char *curr;$/;"	m	struct:__anon7ad910720108	typeref:typename:const char *
curr	src/parser.c	/^static int curr;$/;"	v	typeref:typename:int	file:
double_quoted_string	src/lexer.c	/^Token double_quoted_string()$/;"	f	typeref:typename:Token
end	src/expantion.c	/^    const char *end;$/;"	m	struct:__anon2af5e8630208	typeref:typename:const char *	file:
end	src/lexer.c	/^static const char *end;$/;"	v	typeref:typename:const char *	file:
end	src/lexer.h	/^    const char *end;$/;"	m	struct:__anon7ad910720108	typeref:typename:const char *
environment	src/main.c	/^Environment environment;$/;"	v	typeref:typename:Environment
environment_create_variable	src/environment.c	/^void environment_create_variable(Environment *environment, const char *name, const char *value)$/;"	f	typeref:typename:void
environment_get	src/environment.c	/^Z_String_View environment_get(const Environment *environment, Z_String_View name)$/;"	f	typeref:typename:Z_String_View
environment_get_cstr	src/environment.c	/^const char *environment_get_cstr(const Environment *environment, const char *name)$/;"	f	typeref:typename:const char *
environment_mut_variable	src/environment.c	/^int environment_mut_variable(Environment *environment, const char *name, const char *value)$/;"	f	typeref:typename:int
environment_new	src/environment.c	/^Environment environment_new(Environment *parent)$/;"	f	typeref:typename:Environment
error	src/parser.c	/^static void error(Token token, const char *msg)$/;"	f	typeref:typename:void	file:
evaluate_ampersand	src/eval.c	/^int evaluate_ampersand(Job_Unary *job)$/;"	f	typeref:typename:int
evaluate_and_if	src/eval.c	/^int evaluate_and_if(Job_Binary *job)$/;"	f	typeref:typename:int
evaluate_binary	src/eval.c	/^int evaluate_binary(Job_Binary *job)$/;"	f	typeref:typename:int
evaluate_command	src/eval.c	/^int evaluate_command(Job_Command *job)$/;"	f	typeref:typename:int
evaluate_command_no_fork	src/eval.c	/^void evaluate_command_no_fork(Job_Command *job)$/;"	f	typeref:typename:void
evaluate_if	src/eval.c	/^void evaluate_if(Statement_If *statement)$/;"	f	typeref:typename:void
evaluate_job	src/eval.c	/^int evaluate_job(Job *job)$/;"	f	typeref:typename:int
evaluate_pipe	src/eval.c	/^int evaluate_pipe(Job_Binary *job)$/;"	f	typeref:typename:int
evaluate_statement	src/eval.c	/^int evaluate_statement(Statement *statement)$/;"	f	typeref:typename:int
evaluate_statements	src/eval.c	/^void evaluate_statements(const Statement_Vec *statements)$/;"	f	typeref:typename:void
evaluate_unary	src/eval.c	/^int evaluate_unary(Job_Unary *job)$/;"	f	typeref:typename:int
execute_builtin	src/builtins/builtin.c	/^int execute_builtin(char **argv)$/;"	f	typeref:typename:int
execute_file	src/main.c	/^void execute_file(Z_String_View pathname)$/;"	f	typeref:typename:void
execute_file_from_raw_path	src/main.c	/^void execute_file_from_raw_path(const char *pathname)$/;"	f	typeref:typename:void
execute_init_file	src/main.c	/^void execute_init_file()$/;"	f	typeref:typename:void
expand_alias	src/lexer.c	/^void expand_alias(Token key, Token_Vec *output)$/;"	f	typeref:typename:void
expand_argv	src/expantion.c	/^char **expand_argv(Argv argv)$/;"	f	typeref:typename:char **
expand_dqouted_string	src/expantion.c	/^void expand_dqouted_string(Token token, String_Vec *output)$/;"	f	typeref:typename:void
expand_word	src/expantion.c	/^void expand_word(Token token, String_Vec *output)$/;"	f	typeref:typename:void
find_function	src/builtins/builtin.c	/^function_t find_function(const char *name)$/;"	f	typeref:typename:function_t
free_if_statement	src/parser.c	/^void free_if_statement(Statement_If *statement)$/;"	f	typeref:typename:void
free_job	src/parser.c	/^void free_job(Job *job)$/;"	f	typeref:typename:void
free_job_statement	src/parser.c	/^void free_job_statement(Statement_Job *statement)$/;"	f	typeref:typename:void
free_statement	src/parser.c	/^void free_statement(Statement *statement)$/;"	f	typeref:typename:void
free_statements	src/parser.c	/^void free_statements(Statement_Vec *statements)$/;"	f	typeref:typename:void
free_string	src/builtins/alias.c	/^void free_string(char *s)$/;"	f	typeref:typename:void
free_string_array	src/parser.c	/^void free_string_array(char **s)$/;"	f	typeref:typename:void
function	src/builtins/builtin.c	/^    function_t function;$/;"	m	struct:__anonba70425d0108	typeref:typename:function_t	file:
function_t	src/builtins/builtin.c	/^typedef int (*function_t)(int argc, char **argv);$/;"	t	typeref:typename:int (*)(int argc,char ** argv)	file:
get_alias	src/builtins/alias.c	/^const char *get_alias(Z_String_View key)$/;"	f	typeref:typename:const char *
get_home	src/builtins/cd.c	/^static const char *get_home()$/;"	f	typeref:typename:const char *	file:
get_token_line	src/parser.c	/^Z_String_View get_token_line(Token token)$/;"	f	typeref:typename:Z_String_View
had_error	src/lexer.c	/^static bool had_error;$/;"	v	typeref:typename:bool	file:
had_error	src/parser.c	/^static bool had_error;$/;"	v	typeref:typename:bool	file:
ifBranch	src/parser.h	/^    Statement_Vec ifBranch;$/;"	m	struct:__anon4611dbbf0b08	typeref:typename:Statement_Vec
interpret	src/interpreter.c	/^void interpret(Z_String_View source)$/;"	f	typeref:typename:void
interpret_to	src/interpreter.c	/^void interpret_to(Z_String_View source, Z_String *output)$/;"	f	typeref:typename:void
is_alpha	src/expantion.c	/^bool is_alpha(char c)$/;"	f	typeref:typename:bool
is_argument	src/lexer.c	/^static bool is_argument(char c)$/;"	f	typeref:typename:bool	file:
is_at_end	src/expantion.c	/^static bool is_at_end(Scanner *scanner)$/;"	f	typeref:typename:bool	file:
is_at_end	src/lexer.c	/^static bool is_at_end()$/;"	f	typeref:typename:bool	file:
is_at_end	src/parser.c	/^static bool is_at_end()$/;"	f	typeref:typename:bool	file:
is_builtin	src/builtins/builtin.c	/^bool is_builtin(const char *name)$/;"	f	typeref:typename:bool
is_number	src/builtins/exit.c	/^bool is_number(const char *s)$/;"	f	typeref:typename:bool
is_space	src/lexer.c	/^bool is_space(char c)$/;"	f	typeref:typename:bool
job	src/parser.h	/^    Job *job;$/;"	m	struct:__anon4611dbbf0a08	typeref:typename:Job *
keywords	src/lexer.c	/^static Keyword keywords[] = {$/;"	v	typeref:typename:Keyword[]	file:
left	src/parser.h	/^    Job *left;$/;"	m	struct:__anon4611dbbf0608	typeref:typename:Job *
len	src/expantion.c	/^    int len;$/;"	m	struct:__anon2af5e8630108	typeref:typename:int	file:
len	src/libzatar.h	/^	int len;$/;"	m	struct:__anonf3571ceb0508	typeref:typename:int
len	src/libzatar.h	/^    int len;$/;"	m	struct:__anonf3571ceb0208	typeref:typename:int
len	src/libzatar.h	/^    int len;$/;"	m	struct:__anonf3571ceb0308	typeref:typename:int
len	src/parser.h	/^    int len;$/;"	m	struct:__anon4611dbbf0108	typeref:typename:int
len	src/parser.h	/^    int len;$/;"	m	struct:__anon4611dbbf0908	typeref:typename:int
len	src/token.h	/^    int len;$/;"	m	struct:__anonf9133d330308	typeref:typename:int
lexeme	src/lexer.c	/^    const char *lexeme;$/;"	m	struct:__anon7ad9106d0108	typeref:typename:const char *	file:
lexeme	src/token.h	/^    Z_String_View lexeme;$/;"	m	struct:__anonf9133d330208	typeref:typename:Z_String_View
lexer_get_tokens	src/lexer.c	/^Token_Vec lexer_get_tokens(Z_String_View source)$/;"	f	typeref:typename:Token_Vec
lexer_next	src/lexer.c	/^Token lexer_next()$/;"	f	typeref:typename:Token
lexer_print_tokens	src/lexer.c	/^void lexer_print_tokens(const Token_Vec *tokens)$/;"	f	typeref:typename:void
line	src/lexer.c	/^static int line;$/;"	v	typeref:typename:int	file:
line	src/lexer.h	/^    int line;$/;"	m	struct:__anon7ad910720108	typeref:typename:int
line	src/token.h	/^    int line;$/;"	m	struct:__anonf9133d330208	typeref:typename:int
main	build.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	src/main.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
match	src/expantion.c	/^static bool match(Scanner *scanner, char expected)$/;"	f	typeref:typename:bool	file:
match	src/lexer.c	/^static bool match(char expected)$/;"	f	typeref:typename:bool	file:
match	src/parser.c	/^static bool match(Token_Type type)$/;"	f	typeref:typename:bool	file:
name	src/builtins/builtin.c	/^    const char *name;$/;"	m	struct:__anonba70425d0108	typeref:typename:const char *	file:
original_termios	src/libzatar.h	/^static struct termios original_termios;$/;"	v	typeref:struct:termios
parent	src/environment.h	/^    struct Environment *parent;$/;"	m	struct:Environment	typeref:struct:Environment *
parse	src/parser.c	/^Statement_Vec parse(const Token_Vec *t, Z_String_View s)$/;"	f	typeref:typename:Statement_Vec
parse_and_if	src/parser.c	/^Job *parse_and_if()$/;"	f	typeref:typename:Job *
parse_background_job	src/parser.c	/^Job *parse_background_job()$/;"	f	typeref:typename:Job *
parse_block	src/parser.c	/^Statement_Vec parse_block()$/;"	f	typeref:typename:Statement_Vec
parse_if_block	src/parser.c	/^Statement_Vec parse_if_block()$/;"	f	typeref:typename:Statement_Vec
parse_if_statement	src/parser.c	/^Statement *parse_if_statement()$/;"	f	typeref:typename:Statement *
parse_job	src/parser.c	/^Job *parse_job()$/;"	f	typeref:typename:Job *
parse_job_statement	src/parser.c	/^Statement *parse_job_statement()$/;"	f	typeref:typename:Statement *
parse_pipeline	src/parser.c	/^Job *parse_pipeline()$/;"	f	typeref:typename:Job *
parse_simple_command	src/parser.c	/^Job *parse_simple_command()$/;"	f	typeref:typename:Job *
parse_statement	src/parser.c	/^Statement *parse_statement()$/;"	f	typeref:typename:Statement *
parser_free	src/parser.c	/^void parser_free(Statement_Vec *statements)$/;"	f	typeref:typename:void
peek	src/expantion.c	/^static char peek(Scanner *scanner)$/;"	f	typeref:typename:char	file:
peek	src/lexer.c	/^static char peek()$/;"	f	typeref:typename:char	file:
peek	src/parser.c	/^static Token peek()$/;"	f	typeref:typename:Token	file:
previous	src/lexer.c	/^static char previous()$/;"	f	typeref:typename:char	file:
print_job	src/print_ast.c	/^void print_job(Job *job)$/;"	f	typeref:typename:void
print_statement	src/print_ast.c	/^void print_statement(Statement *statement)$/;"	f	typeref:typename:void
print_statement_if	src/print_ast.c	/^void print_statement_if(Statement_If *statement)$/;"	f	typeref:typename:void
print_statement_job	src/print_ast.c	/^void print_statement_job(Statement_Job *statement)$/;"	f	typeref:typename:void
print_statements	src/print_ast.c	/^void print_statements(Statement_Vec statements)$/;"	f	typeref:typename:void
print_str_without_tabs	src/parser.c	/^void print_str_without_tabs(Z_String_View s)$/;"	f	typeref:typename:void
print_token	src/token.c	/^void print_token(Token token)$/;"	f	typeref:typename:void
prompt	src/main.c	/^static Z_String prompt = {0};$/;"	v	typeref:typename:Z_String	file:
ptr	src/expantion.c	/^    char **ptr;$/;"	m	struct:__anon2af5e8630108	typeref:typename:char **	file:
ptr	src/libzatar.h	/^	char **ptr;$/;"	m	struct:__anonf3571ceb0508	typeref:typename:char **
ptr	src/libzatar.h	/^    char *ptr;$/;"	m	struct:__anonf3571ceb0208	typeref:typename:char *
ptr	src/libzatar.h	/^    const char *ptr;$/;"	m	struct:__anonf3571ceb0308	typeref:typename:const char *
ptr	src/parser.h	/^    Statement **ptr;$/;"	m	struct:__anon4611dbbf0908	typeref:typename:Statement **
ptr	src/parser.h	/^    Token *ptr;$/;"	m	struct:__anon4611dbbf0108	typeref:typename:Token *
ptr	src/token.h	/^    Token *ptr;$/;"	m	struct:__anonf9133d330308	typeref:typename:Token *
render_job	src/print_ast.c	/^void render_job(Job *job, Z_String *output)$/;"	f	typeref:typename:void
render_job_binary	src/print_ast.c	/^void render_job_binary(Job_Binary *job, Z_String *output)$/;"	f	typeref:typename:void
render_job_command	src/print_ast.c	/^void render_job_command(Job_Command *job, Z_String *output)$/;"	f	typeref:typename:void
render_job_unary	src/print_ast.c	/^void render_job_unary(Job_Unary *job, Z_String *output)$/;"	f	typeref:typename:void
repl	src/main.c	/^void repl()$/;"	f	typeref:typename:void
resolve_var	src/expantion.c	/^void resolve_var(Z_String_View var, Z_String *output)$/;"	f	typeref:typename:void
right	src/parser.h	/^    Job *right;$/;"	m	struct:__anon4611dbbf0608	typeref:typename:Job *
safe_execvp	src/eval.c	/^void safe_execvp(const char *file, char *const argv[])$/;"	f	typeref:typename:void
safe_fork	src/eval.c	/^int safe_fork()$/;"	f	typeref:typename:int
scanner_new	src/expantion.c	/^static Scanner scanner_new(Z_String_View s)$/;"	f	typeref:typename:Scanner	file:
single_quoted_string	src/lexer.c	/^Token single_quoted_string()$/;"	f	typeref:typename:Token
skip_comment	src/lexer.c	/^void skip_comment()$/;"	f	typeref:typename:void
skip_empty_statements	src/parser.c	/^void skip_empty_statements()$/;"	f	typeref:typename:void
skip_spaces	src/lexer.c	/^void skip_spaces()$/;"	f	typeref:typename:void
source	src/parser.c	/^static Z_String_View source;$/;"	v	typeref:typename:Z_String_View	file:
start	src/expantion.c	/^    const char *start;$/;"	m	struct:__anon2af5e8630208	typeref:typename:const char *	file:
start	src/lexer.c	/^static const char *start;$/;"	v	typeref:typename:const char *	file:
start	src/lexer.h	/^    const char *start;$/;"	m	struct:__anon7ad910720108	typeref:typename:const char *
syncronize	src/parser.c	/^void syncronize()$/;"	f	typeref:typename:void
token_type_to_string	src/token.c	/^const char *token_type_to_string(Token_Type type)$/;"	f	typeref:typename:const char *
tokens	src/parser.c	/^static const Token_Vec *tokens;$/;"	v	typeref:typename:const Token_Vec *	file:
type	src/lexer.c	/^    Token_Type type;$/;"	m	struct:__anon7ad9106d0108	typeref:typename:Token_Type	file:
type	src/parser.h	/^    Job_Type type;$/;"	m	struct:__anon4611dbbf0308	typeref:typename:Job_Type
type	src/parser.h	/^    Job_Type type;$/;"	m	struct:__anon4611dbbf0408	typeref:typename:Job_Type
type	src/parser.h	/^    Job_Type type;$/;"	m	struct:__anon4611dbbf0508	typeref:typename:Job_Type
type	src/parser.h	/^    Job_Type type;$/;"	m	struct:__anon4611dbbf0608	typeref:typename:Job_Type
type	src/parser.h	/^    Statement_Type type;$/;"	m	struct:__anon4611dbbf0808	typeref:typename:Statement_Type
type	src/parser.h	/^    Statement_Type type;$/;"	m	struct:__anon4611dbbf0a08	typeref:typename:Statement_Type
type	src/parser.h	/^    Statement_Type type;$/;"	m	struct:__anon4611dbbf0b08	typeref:typename:Statement_Type
type	src/token.h	/^    Token_Type type;$/;"	m	struct:__anonf9133d330208	typeref:typename:Token_Type
update_prompt	src/main.c	/^void update_prompt()$/;"	f	typeref:typename:void
values	src/environment.h	/^    Var_Map values;$/;"	m	struct:Environment	typeref:typename:Var_Map
variable	src/expantion.c	/^void variable(Scanner *scanner, Z_String *output)$/;"	f	typeref:typename:void
z_append_file	src/libzatar.h	/^bool z_append_file(const char *fileName, const char *fmt, ...)$/;"	f	typeref:typename:bool
z_clear_line	src/libzatar.h	/^#define z_clear_line(/;"	d
z_clear_screen	src/libzatar.h	/^#define z_clear_screen(/;"	d
z_cmd_append	src/libzatar.h	/^#define z_cmd_append(/;"	d
z_cmd_append_va	src/libzatar.h	/^void z_cmd_append_va(Z_Cmd *cmd, va_list ap)$/;"	f	typeref:typename:void
z_cmd_clear	src/libzatar.h	/^void z_cmd_clear(Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_free	src/libzatar.h	/^void z_cmd_free(Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_init	src/libzatar.h	/^void z_cmd_init(Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_print	src/libzatar.h	/^void z_cmd_print(const Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_print_arg	src/libzatar.h	/^void z_cmd_print_arg(const char *arg)$/;"	f	typeref:typename:void
z_cmd_run_async	src/libzatar.h	/^int z_cmd_run_async(Z_Cmd *cmd)$/;"	f	typeref:typename:int
z_compress_path	src/libzatar.h	/^Z_String z_compress_path(Z_String_View p)$/;"	f	typeref:typename:Z_String
z_cursor_down	src/libzatar.h	/^#define z_cursor_down(/;"	d
z_cursor_left	src/libzatar.h	/^#define z_cursor_left(/;"	d
z_cursor_right	src/libzatar.h	/^#define z_cursor_right(/;"	d
z_cursor_up	src/libzatar.h	/^#define z_cursor_up(/;"	d
z_da_append	src/libzatar.h	/^#define z_da_append(/;"	d
z_da_append_da	src/libzatar.h	/^#define z_da_append_da(/;"	d
z_da_ensure_capacity	src/libzatar.h	/^#define z_da_ensure_capacity(/;"	d
z_da_null_terminate	src/libzatar.h	/^#define z_da_null_terminate(/;"	d
z_da_peek	src/libzatar.h	/^#define z_da_peek(/;"	d
z_da_pop	src/libzatar.h	/^#define z_da_pop(/;"	d
z_die_format	src/libzatar.h	/^void z_die_format(const char *fmt, ...)$/;"	f	typeref:typename:void
z_dir_traverse	src/libzatar.h	/^bool z_dir_traverse(const char *dir, bool action(const char *))$/;"	f	typeref:typename:bool
z_disable_line_wrap	src/libzatar.h	/^#define z_disable_line_wrap(/;"	d
z_disable_raw_mode	src/libzatar.h	/^bool z_disable_raw_mode()$/;"	f	typeref:typename:bool
z_enable_full_buffering	src/libzatar.h	/^bool z_enable_full_buffering(FILE *fp)$/;"	f	typeref:typename:bool
z_enable_raw_mode	src/libzatar.h	/^bool z_enable_raw_mode(int vminKeys, int vtime)$/;"	f	typeref:typename:bool
z_enbale_line_wrap	src/libzatar.h	/^#define z_enbale_line_wrap(/;"	d
z_enter_alternative_screen	src/libzatar.h	/^#define z_enter_alternative_screen(/;"	d
z_exit_alternative_screen	src/libzatar.h	/^#define z_exit_alternative_screen(/;"	d
z_expand_path	src/libzatar.h	/^void z_expand_path(Z_String_View p, Z_String *out)$/;"	f	typeref:typename:void
z_get_cursor_pos	src/libzatar.h	/^bool z_get_cursor_pos(int *x, int *y)$/;"	f	typeref:typename:bool
z_get_file_size	src/libzatar.h	/^int z_get_file_size(FILE *fp)$/;"	f	typeref:typename:int
z_get_fmt_size	src/libzatar.h	/^int z_get_fmt_size(const char *fmt, ...)$/;"	f	typeref:typename:int
z_get_fmt_size_va	src/libzatar.h	/^int z_get_fmt_size_va(const char *fmt, va_list ap)$/;"	f	typeref:typename:int
z_get_home_path	src/libzatar.h	/^Z_String_View z_get_home_path()$/;"	f	typeref:typename:Z_String_View
z_get_path_basename	src/libzatar.h	/^Z_String_View z_get_path_basename(Z_String_View pathname)$/;"	f	typeref:typename:Z_String_View
z_get_path_extention	src/libzatar.h	/^Z_String_View z_get_path_extention(Z_String_View path)$/;"	f	typeref:typename:Z_String_View
z_get_screen_size	src/libzatar.h	/^bool z_get_screen_size(int *width, int *height)$/;"	f	typeref:typename:bool
z_get_screen_size_by_cursor	src/libzatar.h	/^bool z_get_screen_size_by_cursor(int *width, int *height)$/;"	f	typeref:typename:bool
z_get_screen_size_by_ioctl	src/libzatar.h	/^bool z_get_screen_size_by_ioctl(int *width, int *height)$/;"	f	typeref:typename:bool
z_hide_cursor	src/libzatar.h	/^#define z_hide_cursor(/;"	d
z_is_dir	src/libzatar.h	/^bool z_is_dir(const char *pathname)$/;"	f	typeref:typename:bool
z_is_extention_equal	src/libzatar.h	/^bool z_is_extention_equal(Z_String_View pathname, Z_String_View extention)$/;"	f	typeref:typename:bool
z_is_path_exists	src/libzatar.h	/^bool z_is_path_exists(const char *pathname)$/;"	f	typeref:typename:bool
z_is_regular_file	src/libzatar.h	/^bool z_is_regular_file(const char *pathname)$/;"	f	typeref:typename:bool
z_max	src/libzatar.h	/^int z_max(int a, int b)$/;"	f	typeref:typename:int
z_max3	src/libzatar.h	/^int z_max3(int a, int b, int c)$/;"	f	typeref:typename:int
z_memdup	src/libzatar.h	/^void *z_memdup(const void *mem, const size_t size)$/;"	f	typeref:typename:void *
z_min	src/libzatar.h	/^int z_min(int a, int b)$/;"	f	typeref:typename:int
z_min3	src/libzatar.h	/^int z_min3(int a, int b, int c)$/;"	f	typeref:typename:int
z_mkdir	src/libzatar.h	/^bool z_mkdir(const char *pathname)$/;"	f	typeref:typename:bool
z_popen2	src/libzatar.h	/^bool z_popen2(char *pathname, char *argv[], FILE *ppipe[2])$/;"	f	typeref:typename:bool
z_print_error	src/libzatar.h	/^int z_print_error(const char *fmt, ...)$/;"	f	typeref:typename:int
z_print_info	src/libzatar.h	/^int z_print_info(const char *fmt, ...)$/;"	f	typeref:typename:int
z_print_warning	src/libzatar.h	/^int z_print_warning(const char *fmt, ...)$/;"	f	typeref:typename:int
z_read_escape_key	src/libzatar.h	/^int z_read_escape_key()$/;"	f	typeref:typename:int
z_read_file	src/libzatar.h	/^bool z_read_file(const char *fileName, const char *fmt, ...)$/;"	f	typeref:typename:bool
z_read_key	src/libzatar.h	/^int z_read_key()$/;"	f	typeref:typename:int
z_read_whole_file	src/libzatar.h	/^bool z_read_whole_file(const char *pathname, Z_String *out)$/;"	f	typeref:typename:bool
z_rebuild_yourself	src/libzatar.h	/^void z_rebuild_yourself(const char *src_pathname, char **argv)$/;"	f	typeref:typename:void
z_redirect_fd	src/libzatar.h	/^bool z_redirect_fd(int srcFd, const char *destFileName)$/;"	f	typeref:typename:bool
z_register_change_in_window_size	src/libzatar.h	/^bool z_register_change_in_window_size(void funciton(int))$/;"	f	typeref:typename:bool
z_restore_cursor_pos	src/libzatar.h	/^#define z_restore_cursor_pos(/;"	d
z_run_async	src/libzatar.h	/^#define z_run_async(/;"	d
z_save_cursor_pos	src/libzatar.h	/^#define z_save_cursor_pos(/;"	d
z_set_cursor_pos	src/libzatar.h	/^#define z_set_cursor_pos(/;"	d
z_set_cursor_style	src/libzatar.h	/^#define z_set_cursor_style(/;"	d
z_set_cursor_x	src/libzatar.h	/^#define z_set_cursor_x(/;"	d
z_should_rebuild	src/libzatar.h	/^#define z_should_rebuild(/;"	d
z_should_rebuild_va	src/libzatar.h	/^bool z_should_rebuild_va(const char *target, va_list ap)$/;"	f	typeref:typename:bool
z_show_cursor	src/libzatar.h	/^#define z_show_cursor(/;"	d
z_str_append_char	src/libzatar.h	/^void z_str_append_char(Z_String *s, char c)$/;"	f	typeref:typename:void
z_str_append_format	src/libzatar.h	/^void z_str_append_format(Z_String *s, const char *fmt, ...)$/;"	f	typeref:typename:void
z_str_append_format_va	src/libzatar.h	/^void z_str_append_format_va(Z_String *s, const char *fmt, va_list ap)$/;"	f	typeref:typename:void
z_str_append_str	src/libzatar.h	/^void z_str_append_str(Z_String *dst, Z_String_View src)$/;"	f	typeref:typename:void
z_str_chr	src/libzatar.h	/^int z_str_chr(Z_String_View s, char c)$/;"	f	typeref:typename:int
z_str_clear	src/libzatar.h	/^void z_str_clear(Z_String *s)$/;"	f	typeref:typename:void
z_str_compare	src/libzatar.h	/^int z_str_compare(Z_String_View s1, Z_String_View s2)$/;"	f	typeref:typename:int
z_str_compare_n	src/libzatar.h	/^int z_str_compare_n(Z_String_View s1, Z_String_View s2, int n)$/;"	f	typeref:typename:int
z_str_contains	src/libzatar.h	/^bool z_str_contains(Z_String_View s, char c)$/;"	f	typeref:typename:bool
z_str_free	src/libzatar.h	/^void z_str_free(Z_String *s)$/;"	f	typeref:typename:void
z_str_get_line	src/libzatar.h	/^void z_str_get_line(FILE *fp, Z_String *out)$/;"	f	typeref:typename:void
z_str_new_format	src/libzatar.h	/^Z_String z_str_new_format(const char *fmt, ...)$/;"	f	typeref:typename:Z_String
z_str_new_format_va	src/libzatar.h	/^Z_String z_str_new_format_va(const char *fmt, va_list ap)$/;"	f	typeref:typename:Z_String
z_str_pop_char	src/libzatar.h	/^char z_str_pop_char(Z_String *s)$/;"	f	typeref:typename:char
z_str_print	src/libzatar.h	/^void z_str_print(Z_String_View s)$/;"	f	typeref:typename:void
z_str_println	src/libzatar.h	/^void z_str_println(Z_String_View s)$/;"	f	typeref:typename:void
z_str_to_cstr	src/libzatar.h	/^const char *z_str_to_cstr(Z_String *s)$/;"	f	typeref:typename:const char *
z_str_tok_from	src/libzatar.h	/^Z_String_View z_str_tok_from(Z_String_View s, int start_offset, Z_String_View delim)$/;"	f	typeref:typename:Z_String_View
z_str_tok_next	src/libzatar.h	/^Z_String_View z_str_tok_next(Z_String_View s, Z_String_View previous_token, Z_String_View delim)$/;"	f	typeref:typename:Z_String_View
z_str_tok_start	src/libzatar.h	/^Z_String_View z_str_tok_start(Z_String_View s, Z_String_View delim)$/;"	f	typeref:typename:Z_String_View
z_str_top_char	src/libzatar.h	/^char z_str_top_char(Z_String_View s)$/;"	f	typeref:typename:char
z_str_trim	src/libzatar.h	/^void z_str_trim(Z_String *s)$/;"	f	typeref:typename:void
z_str_trim_cset	src/libzatar.h	/^void z_str_trim_cset(Z_String *s, Z_String_View cset)$/;"	f	typeref:typename:void
z_str_view_trim	src/libzatar.h	/^Z_String_View z_str_view_trim(Z_String_View s)$/;"	f	typeref:typename:Z_String_View
z_str_view_trim_cset	src/libzatar.h	/^Z_String_View z_str_view_trim_cset(Z_String_View s, Z_String_View cset)$/;"	f	typeref:typename:Z_String_View
z_sv_to_cstr	src/libzatar.h	/^char *z_sv_to_cstr(Z_String_View s)$/;"	f	typeref:typename:char *
z_swap	src/libzatar.h	/^void z_swap(void *a, void *b, const size_t size)$/;"	f	typeref:typename:void
z_update_screen	src/libzatar.h	/^#define z_update_screen(/;"	d
z_wait_for_byte	src/libzatar.h	/^int z_wait_for_byte()$/;"	f	typeref:typename:int
z_write_file	src/libzatar.h	/^bool z_write_file(const char *fileName, const char *fmt, ...)$/;"	f	typeref:typename:bool
